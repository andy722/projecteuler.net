"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

import operator

primes = [2]

def gen_primes(maxp):
    def prime(n):
        for p in primes:
            if n % p == 0:
                return False
        return True

    def next():
        n = primes[len(primes)-1] + 1
        while not prime(n):
            n += 1
        primes.append(n)
        return n
    for i in xrange(1, maxp):
        next()
    print 'Total primes: ', len(primes)

def triangle_numbers():
    n = 1
    while True:
        yield n*(n+1)/2
        n = n + 1

#too slow
#def num_div(n):
#    return len([i for i in xrange(1, n + 1) if not (n % i)])

def num_div(n):
    prime_divisors = {}
    for p in [p for p in primes if (p <= n)]:
        while n % p == 0:
            n /= p
            prime_divisors[p] = prime_divisors.setdefault(p, 0) + 1
    vals = map(lambda x: x+1, prime_divisors.values())
    return reduce(operator.mul, vals, 1)

gen_primes(500)

n = 1
for t in triangle_numbers():
    divs = num_div(t)
    print 'index = %d, number = %d, divs = %d' % (n, t, divs)
    if divs > 500:
        print 'index = %d, number = %d, divs = %d' % (n, t, divs)
        break
    n = n + 1